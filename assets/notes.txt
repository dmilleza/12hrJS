* What is Javascript?
- Javascript is one of the core technologies of the web, alongisde HTML & CSS.
- It is a high-level, interpreted programming language that can be used on the 
client side as well as the server-side with Node.js.
- Interpreted means executed line by line rather than being compiled into machine 
code first. So the code is executed on the fly making it a scripting language.

* What is Javascript used for?
- Used to manipulate the DOM, which is a tree-like structure of nodes and everything
on the page is a node including every HTML tag, every attribute, every piece of
text and so on. 
- Javascript provides methods for dynamically changing the content or the styles 
of the elements in the DOM.
- It allows developers to create dynamic and interactive web pages that can respond
to user actions. Those user actions are called events, so we can respond to mouse
clicks, or drags, or hovers, keyboard events, form submissions, and just about
anything you can think of that you can do in the browser. 
- Making asynchronous requests is one of the most powerful uses of JS, and it's 
used to interact with back-end servers whether it's your own server or a public
API. We can make HTTP requests right from our code to fetch data or submit data,
and this happens all behind the scenes without having to refresh the page. These
are often used in what are called single page applications (SPAs) to dynamically
load and update content without having to reload the entire page. 
- Animations and effects can be created by using CSS transitions and animations,
request animation frame method, and different libraries.
- Data manipulation is the process of modifying or transforming data, and JS is a
full-featured language with data structures like arrays. 
- Data can be stored on the client or in the browser using things like local 
storage, session storage, and cookies. 
- SPAs are applications that load a single HTML page and dynamically update the 
content without having to reload the entire page, this provides a seamless and 
responsive user experience. You'd usually use a front-end framework for building
SPAs like React, View, or Angular. 
- JS can also be used on the server side with the Node.js runtime as well as Dino,
so in addition to consuming APIs from the front end, we can also create APIs that 
interact with databases on the back end. 

* Why Learn Javascript?
- Popularity: one of the most widely used languages. Many job opportunities.
- Versatility: used for many different things, such as web pages, APIs, and 
mobile/desktop applications.
- Easy to learn: compared to other lower level languages, great to start with.

* Environment Setup
- For vanilla front end JS, all you need is a text editor and a browser.
- VS Code is the most popular text editor for web development. 
- Git is a version control system where we can create repositories with our code
and push to third-party services like Github or Gitlab. 
- Recommended extensions:
    1. Live server gives you a mini dev server that you can run your files with, 
    and it will reload in the browser whenever you make any changes. 
    2. Prettier keeps your code nice and clean. Can automatically save or delete
    semicolons. 

* 17:38
- When opening with live server, you can see "127.0.0.1" in the URL bar which is 
our local host. It's called our loopback address and it runs on port 5500 by 
default. 

* 24:26
- Every browser has developer tools. The "elements" tab is for HTML and CSS. The 
console is where we'll see all of our front-end JS warnings and errors. 

* 27:13
- To clear console, just type "clear()" or reload the page

* 27:44
- Objects are common in just about every programming language, they're an entity 
that has properties and methods. A property is like an attribute or a value, where
a method is a function that does something. 

* Primitive Data Types
- String: sequence of characters. Must be in quotes or backticks
- Number: integers as well as floating-point numbers
- Boolean: logical entity/ true or false
- Null: intentional absence of any object value
- Undefined: a variable not yet defined/assigned
- Symbol: object that returns a unique Symbol
- BigInt: numbers greater than number type can handle

* Reference Types (Objects)
- They are a non-primitive value referred when assigned to a variable.
- Object literals, arrays, and functions are all reference types 

* Static Typing vs Dynamic Types
- JS is a dynamically-typed language, we do not explicitly define the types for 
our variables. Many other languages are statically-typed.
- TypeScript is a superset of Javascript, which allows static-typing. This can 
make your code more verbose and less prone to errors.

* Data Types
- Primitives are stored directly on the "stack" where it is accessed from
- Objects are stored in the heap and accessed by reference

* Type Conversion and Type Coercion 
- Conversion or type casting is the process of explicitly converting a value from
one type to another. 
- Coercion usually refers to having the types changed implicitly. 
- The reason why primitives have methods is because JS creates a temporary 
wrapper of the associated type. 
- Coercion happens when you apply operators to values that have different types.

* Strings
- When we run a property or method on a string, the wrapper turns it into a new 
object. 
- Objects have something called a prototype and that's where the methods are 
stored. 

* Numbers 
- There is no length property on numbers, so you have to turn it into a string.

* Math Object
- JS has a built in object called "Math" that has a bunch of methods on it that
have to do with mathematical operations such as: finding the square root, round
up/down, and a random method. 

* Date and Time
- JS has a date object that represents a point in time and lets you do some basic
operations on it. 
- The Unix timestamp is a system for describing a point in time, it's an integer 
that represents the number of seconds that's elapsed/passed since the date of 
January 1st, 1970. That timestamp is expressed in milliseconds. 

* Date Object
- There is an API for dates called "Intl.datetimeformat" and it's a powerful way 
to format dates in a locale sensitive way. This is because different places 
interpret dates and times in different ways. 

* Arrays and Object literals
- Arrays are a special type of object and a data structure in JS that stores 
multiple values. Values are called elements and have an index number. 
- Nesting an array is having an array as an index inside of an array. 
- An object literal is a common data structure that holds key/value pairs. 

* Javascript Object Notation
- Lightweight data interchange format, a way of storing data in a simple readable 
format. 
- Several years ago, extensible markup language (XML) was the standard for 
sending data or getting data from a server, but now JSON is the standard. 
- The syntax is very similar to JS object literals. The keys have double quotes 
around them. 
- Usually a JSON file will have an array of JSON objects.
- A JSON string is what you would send to a server.
- Local storage is a way to store things on your client or in your browser, and 
it can only store strings. 
- You cannot use methods on a JSON string. If you want to access something, you 
have to parse it first. 

* Functions, Scope, Execution Context
- When you declare a function, parameters are in the parentheses.
- When you pass in a value for function execution, arguments are in the paretheses.
- Invoking a function is when you run/call it.
- Defining a function is when you declare it for what it does. 
- Most of the time when we create functions, we're returning a value. 
- The reason we return something is because we want to do something with that value.
- Scope refers to the current area or the context of a specific piece of code.
- Global variables will be accessible from anywhere.
- Variable shadowing is when a function variable overrides a global variable that 
shares the same name.
- Var is function scoped, you can't access a var variable that's inside of a 
function outside of the function. You can access var with other blocks like loops 
and if statements.
- Hoisting is the process of moving all the function and variable declarations to 
the top of the current scope before the code is run. 
- Arrow functions are more compact, have implicit returns, and they have a lexical
scope.
- Immediately invoked function expressions (IIFE) is used when you want to create
and invoke a function at the same time. Used to avoid global scope pollution.
- Recursion is when you call a function within itself. 
- When you run any JS, a special environment is created to handle the transformation 
and execution of code. This is called the execution context. It contains the 
currently running code and everything that aids in its execution. 
- There is a global execution context as well as a function execution context for 
every function invoked. 
- Execution context can be visualized as a box with two sides. The variable 
environment stores all of your variables and functions as key:value pairs in memory.
The other side is the thread of execution. JS is a single threaded language, a thread 
is like a process, and your code is executed line by line on that thread. A thread
has a call stack and memory heap.
- Whenever an execution context is created, there's two phases:
    * Memory creation phase:
    1. Create global object 
    2. Create this object and bind it to global object
    3. Setup memory heap
    4. Store functions and variables in global execution context and set to undefined.
    * Execution phase:
    1. Execute code line by line
    2. Create a new execution context for each function call 
- A call stack is a stack of functions to be executed, it manages execution contexts.
Stacks are last in, first out. 
- At the bottom of the call stack is the global execution context.

* Logic and Control Flow
- If statements are in just about every programming language. 
- Switch statements are not as common as if statements, but if you have something
that's five or more else if, then they are recommended. 
- Anything not falsy will be truthy. Whenever you pass something into an if statement,
it's always going to be coerced into a boolean. 
- Strict equality (===) is preferred over loose equality (==) because it checks type. 
- The ternary operator will be used a lot.

* Loops and High Order Array Methods
- HOAM are methods we can use on arrays that take in a function as an argument and we 
can use these methods to loop through or iterate arrays and do specific operations on 
each element. 
- A loop is a control structure that provides a way to do iteration in programming. 
- Iteration is a process where you repeat something over and over again until a 
certain condition is met or not met, can help automate tasks. 
- Infinite loops can happen if you mess up the condition or forget to increment. 
- Break is useful where once you hit a certain condition, there's no need to keep 
going and you want to break out of the loop. 
- With continue, you can skip the rest of the code in a current iteration and then 
continue to the next iteration. 
- A while loop only has a condition in the parentheses.
- Use a for loop over a while loop when you know the number of times that you want 
the loop to run. 
- Use a while loop when the number of times the loop will run is unknown. 
- In a do while loop, the condition will always run at least once even if the 
condition is false. 
- A for of loop is a newer way to loop through iterable objects like arrays, even 
strings, maps, and sets. 
- First choice of looping through arrays is the for each method. 
- Use for in loop to get either the keys and/or the values of an object literal.
- High order array methods take in a function as an argument, also known as a 
callback function. In that callback, we can pass in a variable for each element in 
that array. 
- forEach just loops through and doesn't return anything. Usually used on an array
of objects. 
- filter returns a modified array, usually stored in a variable unlike forEach.
- map returns an array just like filter, but we can modify anything we want and 
return an array of anything we want. 
- reduce reduces your array down to a single value. Useful if you have a shopping
cart and want to get the total value

* Document Object Model
- 